<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构 on 兔兔的网站</title><link>https://yinan-hong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><description>Recent content in 数据结构 on 兔兔的网站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 07 Jun 2021 15:28:15 +0800</lastBuildDate><atom:link href="https://yinan-hong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>手撸一颗B树</title><link>https://yinan-hong.github.io/post/btree/</link><pubDate>Mon, 07 Jun 2021 15:28:15 +0800</pubDate><guid>https://yinan-hong.github.io/post/btree/</guid><description>&lt;p>本文教大家如何手撸一颗B树。&lt;/p>
&lt;p>我在网上看到的大多数教程都是上来就丢给你一堆B树的性质特点，简直劝退，本文我会尝试用人能理解的思路介绍一下B树，有代码干货。&lt;/p></description></item><item><title>手撸AVL树</title><link>https://yinan-hong.github.io/post/avltree/</link><pubDate>Thu, 03 Jun 2021 17:47:39 +0800</pubDate><guid>https://yinan-hong.github.io/post/avltree/</guid><description>&lt;p>Wiki:在计算机科学中，AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(logn)。&lt;/p></description></item></channel></rss>